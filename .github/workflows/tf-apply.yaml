name: Terraform Apply

on:
  workflow_call:
    inputs:
      github-env:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: "devl"
      terraform-ver:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      tfvar-file:
        description: 'Specifies the environment specific tfvar file e.g: devl.terraform.tfvars'
        required: true
        type: string
        default: devl.terraform.tfvars
      issue-number:
        description: 'Specifies the GitHub Issue Number.'
        required: true
        type: string
    secrets:
      aws-region:
        required: true
      aws-role-arn:
        required: true
      aws-tf-state-bucket-name:
        required: true
      kms-key-arn: 
        required: true
      git-token:
        required: true
permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR
 
jobs:
  apply:
    name: "TF Apply (${{ inputs.github-env }})"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        id: git-checkout
        uses: actions/checkout@v4

      - name: Create the CiBuild string
        if: startsWith(github.ref, 'refs/heads/feature')
        id: get-ci-build-string
        run: |
          echo "ci-build=`echo ${{ github.ref_name }}|sed s'/\//-/g'|head -c 15| \
          tr [:upper:] [:lower:]`-`echo ${{ github.sha }}|base64|head -c 4|tr [:upper:] [:lower:]`" >> $GITHUB_OUTPUT 
          
      - name: Add GitHub attributes to terraform.tfvars file
        id: add-gihub-attributes
        run: |
          cd tf
          mv params/${{ inputs.tfvar-file }} terraform.tfvars
          echo -e '######################################## GitHub Context Variables  #################################'>> terraform.tfvars 
          if [[ "${{ inputs.github-env }}" == "feature" ]]; then
            echo -e 'environment_name     = "devl"'                                                                     >> terraform.tfvars 
          else
            echo -e 'environment_name     = "${{ inputs.github-env }}"'                                                 >> terraform.tfvars 
          fi
          echo -e 'github_url           = "${{ github.repositoryUrl }}"'                                                >> terraform.tfvars 
          echo -e 'github_ref           = "${{ github.ref }}"'                                                          >> terraform.tfvars 
          echo -e 'github_sha           = "${{ github.sha }}"'                                                          >> terraform.tfvars 
          echo -e 'github_wf_run_num    = "${{ github.run_number }}"'                                                   >> terraform.tfvars 
          echo -e 'github_repo          = "${{ github.event.repository.name }}"'                                        >> terraform.tfvars
          echo "=========================================== terraform.tfvars ==========================================="
          cat terraform.tfvars 

      - name: Add CiBuild
        if: startsWith(github.ref, 'refs/heads/feature')
        id: add-ci-build
        run: |
          echo -e 'ci_build             = "-${{ steps.get-ci-build-string.outputs.ci-build }}"'                         >> tf/terraform.tfvars
          echo "=========================================== terraform.tfvars ==========================================="
          cat tf/terraform.tfvars

      - name: Configure AWS credentials from AWS account
        id: aws-config
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ secrets.aws-region }}
          role-session-name: github-aws-terraform-oidc

      - name: Configure and cache Terraform plugin
        id: plugin
        uses: subhamay-bhattacharyya/9996-tf-plugin@main
        with:
          tf-version: ${{ inputs.terraform-ver }}
          caching: 'true'

      - name: Output Cache used
        id: cache-used
        run: echo "Cache used? ${{ steps.plugin.outputs.used-cache }}"

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.aws-tf-state-bucket-name }}
          AWS_BUCKET_KEY_NAME: ${{ github.event.repository.name }}
        run: |
          cd ${{ github.workspace }}/tf
          terraform fmt
          terraform init -backend-config="bucket=${{ secrets.aws-tf-state-bucket-name }}" -backend-config="key=${{ github.event.repository.name }}/terraform.tfstate" -backend-config="region=${{ secrets.aws-region }}"

      - name: Terraform Apply
        id: apply
        run: |
          cd ${{ github.workspace }}/tf
          terraform apply -auto-approve

          terraform output -json > ${{ github.workspace }}/tf/terraform-output.json

      - name: Use Issue Number from Previous Job
        run: |
          echo "The issue number is ${{ inputs.issue-number }}"

      - name: Post Comment on GitHub Issue
        id: post-comment
        uses: octokit/request-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.git-token }}
        with:
          route: POST /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/1/comments
          body: |
            The Terraform apply output is as follows:
            \`\`\`json
            `cat ${{ github.workspace }}/tf/terraform-output.json`
            \`\`\`